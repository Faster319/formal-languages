options {
    STATIC = false;
}


PARSER_BEGIN(Assignment)
import java.util.Stack;

public class Assignment {
    public static void main(String[] args) throws ParseException, TokenMgrError, NumberFormatException {
        try {
            String newString = "";
            Assignment parser = new Assignment(System.in);
            Stack<String> operators = new Stack<>();
            parser.Def(operators);
            System.out.println("PASS");
            while (!operators.isEmpty()) {
                newString += operators.pop();
            }
            int result = AST.answer(AST.infixToRPN(newString));
            System.out.println(result);

        } catch (ParseException e) {
            System.out.println("FAIL");
            System.err.println(e.currentToken.next.beginLine);
        }
    }
}

class AST {
    static String infixToRPN(String expression) {
        Stack<Character> stack = new Stack<>();
        String output = "";

        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);

            if (Character.isDigit(c)) {
                output += c;
            } else {
                while (!stack.isEmpty() && c == '+') {
                    output += stack.pop();
                }
                stack.push(c);
            }
        }

        while (!stack.isEmpty()) {
            output += stack.pop();
        }
        return output;
    }

    static int answer(String output) {
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < output.length(); i++) {
            char c = output.charAt(i);

            if (Character.isDigit(c)) {
                stack.push(Character.getNumericValue(c));
            } else if (c == '+') {
                int second = stack.pop();
                int first = stack.pop();
                stack.push(first + second);
            } else if (c == '*') {
                int second = stack.pop();
                int first = stack.pop();
                stack.push(first * second);
            }
        }
        return stack.pop();
    }
}

PARSER_END(Assignment)

SKIP:  {
"\t"
}

TOKEN: {
<SPACE: " ">            |
<ADD: "+">              |
<MULT: "*">             |
<DEF: "DEF">            |
<MAIN: "MAIN">          |
<LBRACE: "{">           |
<RBRACE: "}">           |
<SEMICOLON: ";">        |
<NUMBER: (["0"-"9"])+>  |
<FUNCT: (["A"-"Z"])+>   |
<PARAM: (["a"-"z"])+>   |
<LINE: ("\r\n" | "\n\r" | "\r" | "\n")>
}

void Def(Stack<String> operators) throws NumberFormatException:
{
    Token n, a, m;
}
{
    <DEF>
    <SPACE>
    <FUNCT>
    <SPACE>
    <PARAM>
    <SPACE>
    <LBRACE>
    <SPACE>
    (n = <NUMBER> {operators.push(n.image);}|
     a = <ADD> {operators.push(a.image);}|
     m = <MULT> {operators.push(m.image);})*
    <SPACE>
    <RBRACE>
    <SPACE>
    <SEMICOLON>
    <LINE>
}